Работа по Заданию: 

Добавлена поддержка символических ссылок в xv6-riscv:

1. Определен новый тип файла T_SYMLINK в kernel/stat.h.
2. Добавлено ограничение на длину цели ссылки (MAXPATH).
3. Введено ограничение на максимальную глубину рекурсии (40 переходов).
4. Реализованы системные вызовы:
   - `symlink(const char *target, const char *filename)` - создание символической ссылки
   - `readlink(const char *filename, char *buf)` - чтение цели символической ссылки
5. Модифицирована утилита `ln` для поддержки флага `-s`, что позволяет создавать символические ссылки.
6. Модифицирована утилита `ls` для отображения целей символических ссылок.
7. Расширен системный вызов `open` для разыменования ссылок и добавлен флаг O_NOFOLLOW.
8. Реализована функция `lstat`, показывающая информацию о самой ссылке, а не о цели.
9. Добавлена корректная обработка абсолютных и относительных путей в ссылках.
10. Добавлена защита от рекурсивных ссылок, включая прямую и косвенную рекурсию.
11. Создана тестовая программа `symtest` для проверки всех аспектов работы символических ссылок.
12. Реализовано разыменование ссылок при чтении файлов всеми утилитами, включая `cat` и другие.

Были изменены:
1. **kernel/stat.h**: добавлен тип файла T_SYMLINK
2. **kernel/fcntl.h**: добавлен флаг O_NOFOLLOW
3. **kernel/param.h**: определена константа MAXSYMLINK для ограничения глубины рекурсии
4. **kernel/fs.c**: 
   - Добавлена функция namex с поддержкой относительных путей
   - Модифицированы функции namei и nameiparent
   - Добавлена функция golink для разыменования символических ссылок
   - Реализован механизм обнаружения рекурсивных и косвенных рекурсивных ссылок
5. **kernel/sysfile.c**: 
   - Реализованы системные вызовы sys_symlink и sys_readlink
   - Модифицирован sys_open для поддержки разыменования ссылок и флага O_NOFOLLOW
   - Добавлена функция sys_lstat для получения информации о ссылке
6. **kernel/file.c**: 
   - Модифицированы функции для корректной работы с символическими ссылками
7. **user/user.h**: добавлены прототипы для symlink, readlink и lstat
8. **user/ln.c**: добавлена обработка флага -s для создания символических ссылок
9. **user/ls.c**: добавлен вывод целей символических ссылок
10. **user/symtest.c**: создана тестовая программа, проверяющая все аспекты работы с символическими ссылками

Для проверки реализации:

1. Автоматическое тестирование:
   ```
   symtest
   ```

2. Ручное тестирование через командную строку:
   ```
   mkdir /test
   echo hello > /test/file
   ln -s /test/file /test/link
   ls -l /test
   cat /test/link
   ```

3. Проверка обработки рекурсивных ссылок:
   ```
   ln -s /loop_link /loop_link
   cat /loop_link  # Должна быть ошибка "symlink loop detected"
   ```

4. Проверка обработки косвенной рекурсии:
   ```
   ln -s /link2 /link1
   ln -s /link3 /link2
   ln -s /link1 /link3
   cat /link1  # Должна быть ошибка "symlink loop detected"
   ```

5. Проверка работы с относительными путями:
   ```
   mkdir /dir1
   mkdir /dir1/dir2
   echo test > /dir1/dir2/file
   ln -s ../dir2/file /dir1/link
   cat /dir1/link  # Должно показать содержимое файла
   ```

-------------------------------------
Условие:

<<СП Д/З No6 Реализация символических ссылок Операционные системы, весна 2024
(1) Добавить в хѵ6 поддержку символических ссылок на файлы. Ограничить длину цели ссылки имеющимся пределом на длину пути константой МАХРАТН. Ограничить максимальное количество переходов по ссылке (глубину рекурсии) некоторым новым параметром (в ядре Linux это ограничение составляет 40 переходов). Добавить новый тип файла флаг T_SYMLINK B kernel/stat.h. Цель ссылки должна храниться в виде обычного содержимого файла типа «ссылка», размер файла определяет длину ссылки (нет необходимости сохранять в файле терминирующий нуль). Разработать следующие системные вызовы по аналогии с работой вызовов sys_open, sys_read, sys_write И sys_close :

int symlink(const char *target, const char *filename);

создает символическую ссылку filename на target, возвращать ошибку при невозможности создать файл ссылки или при превышении максимальной длины цели ссылки.

int readlink(const char *filename, char *buf);

прочитывает цель символической ссылки в буфер (размер буфера должен быть не меньше, чем МАХРАТН, ядро не должно переполнить буфер даже если по ошибке в файле оказалась более длинная цель). Данный вызов не должен следовать ссылкам рекурсивно и проверять наличие целевого файла, просто прочитать значение цели как есть.

Модифицировать утилиту ln так, чтобы она создавала символические ссылки при указании ключа
s:

ln-s path target

Модифицировать утилиту 15 так, чтобы она выводила цели символических ссылок.

(2) Модифицировать системный вЫЗОВ open таким образом, чтобы по умолчанию он разыменовывал ссылки рекурсивно: при открытии символических ссылок фактически должна открываться цель ссылки. Если цель также ссылка, следовать по ссылкам рекурсивно, при достижении максимального количества переходов по ссылке вернуть ошибку. Если целевой файл не существует, вернуть ошибку. Добавить в системный ВЫЗОВ open флаг O_NOFOLLOW (файл fcntl.h) при установке которого системный вызов будет открывать саму ссылку, а не цель. Реализовать функцию 1stat, которая (в отличие от stat) выдает информацию о ссылке, а не цели. Адаптировать утилиту ls на использование соответствующих open и lstat соответствующим образом.

При разыменовании учесть, что цель ссылки может быть относительной не начинаться с символа '/', содержать в пути ".." - переход на каталог выше и "." - данный каталог. В этом случае имя
ссылки считается относительно каталога ссылки, а не текущего каталога процесса, разыменовывающего ссылку. При разработке учесть принципы работы функций namei / namex и др.

(3) Добавить приложение для автоматического тестирования символических ссылок. Приложение должно создать необходимое количество файлов, каталогов и символических ссылок так, чтобы протестировать следующие ситуации.

*Корректная абсолютная ссылка на файл.
*Корректная относительная ссылка на файл того же каталога.
*Корректная относительная ссылка на файл каталога на 2-3 уровня выше.
*Корректная относительная ссылка на файл каталога на 2-3 уровня ниже.
*Корректная абсолютная ссылка на абсолютную символическую ссылку (глубина рекурсии 2-3, конечная цель - существующий файл).
• Корректная абсолютная ссылка на относительную символическую ссылку (глубина рекурсии 2- 3, конечная цель существующий файл).
*Корректная относительная ссылка на относительную символическую ссылку (глубина рекурсии 2-3, конечная цель существующий файл).
• Ссылка на себя (бесконечная рекурсия)
• Косвенная ссылка на себя (бесконечная рекурсия через 2-3 перехода)
• Абсолютная ссылка на несуществующий файл
• Относительная ссылка на несуществующий файл того же каталога (при этом файл существует в каталоге на 2-3 уровня выше или ниже)
• Относительная ссылка на несуществующий файл каталога на 2-3 уровня выше (при этом файл в том же каталоге существует)
• Относительная ссылка на несуществующий файл каталога на 2-3 уровня ниже (при этом файл в том же каталоге существует)
-
Вывести (запустив из приложения ls необходимое количество раз) получившуюся структуру каталогов. Автоматически убедиться, что все эти случаи обрабатываются корректно при открытии ссылки (правильно прочитывают файл, если цель существует и дают ошибку при отсутствии цели или бесконечной рекурсии) как в случае, если текущий каталог процесса каталог ссылки, так и из каталогов на 2-3 уровня выше и ниже каталога ссылки (каталог тоже менять автоматически с помощью соответствующего системного вызова, все тесты проделать за один запуск). Использовать короткие (2-3 символа) имена файлов, каталогов и ссылок.


-------------------------------------
xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
